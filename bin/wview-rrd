#!/usr/bin/perl

# wview -> RRD data storage by twitham@sbcglobal.net

use warnings;
use Carp;
use RRDs;

my $rrdfile = 'wview.rrd';    # datafeed from station
my $rainfile = 'rain.rrd';    # added to track total rain
my $windfile = 'wind.rrd';    # added to track average wind direction
my $totalrain = 30; # must match database starting rain amount before first run
my @common = (step	=> 60,	# common shared RRD options
	      heartbeat	=> 11 * 60,
	      xff	=> 0.5);
my @rra	= (join(':', 60 =>	# 1 minute details: 1 month
		31 * 24 * 60 * 60),
	   join(':', 5 * 60 =>	# 5 minute archives: 3 months
		93 * 24 * 60 * 60),
	   join(':', 60 * 60 =>	# hourly archives: 5 years
		5 * 366 * 24 * 60 * 60),
	   join(':', 24 * 60 * 60 => # daily archives: 50 years
		50 * 366 * 24 * 60 * 60),
    );

my $wviewrrd = {
    @common,
    ds => { 
	barometer	=> "GAUGE:14:33",
	stationPressure	=> "GAUGE:14:33",
	altimeter	=> "GAUGE:14:33",
	inTemp		=> "GAUGE:-50:200",
	outTemp		=> "GAUGE:-50:200",
	inHumidity	=> "GAUGE:0:100",
	outHumidity	=> "GAUGE:0:100",
	windSpeed	=> "GAUGE:0:200",
	windDir		=> "GAUGE:0:360",
	windGust	=> "GAUGE:0:200",
	windGustDir	=> "GAUGE:0:360",
	rainRate	=> "GAUGE:0:100",
	sampleRain	=> "GAUGE:0:100",
	dewpoint	=> "GAUGE:-100:200",
	windchill	=> "GAUGE:-100:200",
	heatindex	=> "GAUGE:-50:250",
	sampleET	=> "GAUGE:0:U",
	radiation	=> "GAUGE:0:U",
	UV		=> "GAUGE:0:36",
    },
    rra => [ "$rra[0]:AVERAGE",
	     "$rra[1]:AVERAGE:MIN:MAX:LAST",
	     "$rra[2]:AVERAGE:MIN:MAX:LAST",
	     "$rra[3]:AVERAGE:MIN:MAX:LAST",
	],
};

my $rainrrd = $wviewrrd; # rain is identical
my $windrrd = {
    @common,
    ds => { default => 'ABSOLUTE:0:100' },
    rra => [ "$rra[0]:AVERAGE",
	     "$rra[1]:AVERAGE",
	     "$rra[2]:AVERAGE",
	     "$rra[3]:AVERAGE",
	],
};

# basic station fields from wvtxt A and L lines, in order
my @FIELD = qw(
barometer
stationPressure
altimeter
inTemp
outTemp
inHumidity
outHumidity
windSpeed
windDir
windGust
windGustDir
rainRate
sampleRain
dewpoint
windchill
heatindex
sampleET
radiation
UV
);
my $FIELD = join ':', @FIELD;

my $last = 1;			# last update time
my $ERR;
if (-s $rrdfile) {
    $last = RRDs::last($rrdfile);
    $ERR = RRDs::error;
    die "ERROR while reading LAST of $rrdfile: $ERR\n" if $ERR;
}
if (-s $rainfile) {
    my($averages) = RRDs::graph('',
				'--start' => time - 30 * 24 * 60 * 60,
				'--end' => time,
				"DEF:totalRain=$rainfile:totalRain:LAST",
				"PRINT:totalRain:LAST:%lf",
	);
    $ERR = RRDs::error;
    die "ERROR while reading LAST of $rainfile: $ERR\n" if $ERR;
    ($totalrain) = @$averages;
}
&catchup($last);
exit;				# all done

# gather and store all archive records since last update
sub catchup {
    my($last) = @_;
    open PIPE, '-|', (qw(wview-txt localhost), $last) or die $!;
    select PIPE; $| = 1; select STDOUT; $| = 1;
    while (<PIPE>) {
	chomp;
	my($type, $time, @v) = split ':';
	$type eq 'L' and next;	# ignore LOOPS while getting archives
#	$type eq 'A' and next;	# ignore archives while getting LOOPS
	grep s/-100000.000000/U/, @v; # unknown wview -> RRD
	map { $f{$_} = shift @v || 0 } @FIELD;
	&rrdupdate($rrdfile, $FIELD,
		   (join ':', $time, map { $f{$_} } @FIELD),
		   $wviewrrd);

	$totalrain += $f{sampleRain} || 0;
	&rrdupdate($rainfile, 'totalRain',
		   (join ':', $time, $totalrain),
		   $rainrrd);
	&wind($time, $f{windDir}, $f{windGustDir});
    }
}

# count wind direction occurrences into 8 compass buckets
sub wind {
    my($time, $adir, $gdir) = @_;
    my @adir = qw(an ane ae ase as asw aw anw an);
    my @gdir = qw(gn gne ge gse gs gsw gw gnw gn);
    my %dir;
    $dir{$adir[($adir + 22.5) / 45]} = 1
	unless $adir eq 'U';
    pop @adir;
    $dir{$gdir[($gdir + 22.5) / 45]} = 1
	unless $gdir eq 'U';
    pop @gdir;
    &rrdupdate($windfile,
    	       (join ':', @adir, @gdir),
    	       (join ':', $time, map { $dir{$_} || 0 } @adir, @gdir),
    	       $windrrd);
}

# update an RRD file, creating it if needed
sub rrdupdate {
    my($file, $template, $data, $rrd) = @_;

    unless (-s $file) {
	my @path = split '/', $file;
	my $parent = '.';
	for (@path) {
	    next if /.rrd$/;
	    $parent .= "/$_";
	    next if -d $parent;
	    mkdir $parent or carp "can't mkdir $parent: $!\n";
	}
	my $step = $rrd->{step} || 60;
	my $heartbeat = $rrd->{heartbeat} || $step * 3;
	my $start = $rrd->{start} || time - 366 * 24 * 60 * 60;
	my @rrd = ($file,
		   '--start' => $start,
		   '--step'  => $step);
	for my $ds (split ':', $template) {
	    my $text = 'GAUGE:0:U';
	    defined $rrd->{ds} and defined $rrd->{ds}{default} and
		$text = $rrd->{ds}{default};
	    defined $rrd->{ds} and defined $rrd->{ds}{$ds} and
		$text = $rrd->{ds}{$ds};
	    my($type, $min, $max) = split ':', $text;
	    defined $min or $min = 0;
	    defined $max or $max = 'U';
	    push @rrd, "DS:$ds:$type:$heartbeat:$min:$max";
	}
	for my $p (@{$rrd->{rra}}) {
	    my($per, $total, @cf) = split ':', $p;
	    my $steps = $per / $step;
	    my $rows = $total / $per;
	    my $xff = $rrd->{xff} || 0.5;
	    for my $cf (@cf) {
		push @rrd, "RRA:$cf:$xff:$steps:$rows";
	    }
	}
	RRDs::create(@rrd);
	my $err = RRDs::error;
	croak "ERROR while creating $file: $err\n" if $err;
    }
    print "$data\n";
    RRDs::update($file, '--template' => $template, $data);
    my $err = RRDs::error;
    carp "ERROR while updating $file: $err\n" if $err;
}
