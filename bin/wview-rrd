#!/usr/bin/perl

use warnings;
use Carp;
use RRDs;
use Data::Dumper;

my $rrdfile = 'wview.rrd';
my $rainfile = 'rain.rrd';  # needed to track total rain
my $totalrain = 30;	    # must match database starting rain amount
my $wviewrrd = {
    step	=> 60,
    heartbeat	=> 11 * 60,
    xff		=> 0.5,
#    ds => { sampleRain => 'ABSOLUTE' },
    rra	=> [[60 =>		# 1 minute details: 30 days
	     30 * 24 * 60 * 60, 'AVERAGE'],
	    [5 * 60 =>		# 5 minute archives: 90 days
	     90 * 24 * 60 * 60, 'AVERAGE', 'MIN', 'MAX'],
	    [60 * 60 =>		# hourly archives: 5 years
	     5 * 366 * 24 * 60 * 60, 'AVERAGE', 'MIN', 'MAX'],
	    [24 * 60 * 60 =>	# daily archives: 50 years
	     50 * 366 * 24 * 60 * 60, 'AVERAGE', 'MIN', 'MAX'],
	],
};
my $rainrrd = { %$wviewrrd };	# rain is identical except it needs "LAST":
map { push @$_, 'LAST' } @{$rainrrd->{rra}};

# print Dumper $rainrrd;
# exit;

# basic station fields from wvtxt A and L lines, in order
my @FIELD = qw(
barometer
stationPressure
altimeter
inTemp
outTemp
inHumidity
outHumidity
windSpeed
windDir
windGust
windGustDir
rainRate
sampleRain
dewpoint
windchill
heatindex
sampleET
radiation
UV
);
my $FIELD = join ':', @FIELD;

my $last = 1;
my $ERR;
if (-s $rrdfile) {
    $last = RRDs::last($rrdfile);
    $ERR = RRDs::error;
    die "ERROR while reading LAST of $rrdfile: $ERR\n" if $ERR;
}
if (-s $rainfile) {
    my($averages) = RRDs::graph('',
				'--start' => time - 30 * 24 * 60 * 60,
				'--end' => time,
				"DEF:totalRain=$rainfile:totalRain:LAST",
				"PRINT:totalRain:LAST:%lf",
	);
    $ERR = RRDs::error;
    die "ERROR while reading LAST of $rainfile: $ERR\n" if $ERR;
    ($totalrain) = @$averages;
#    print Dumper $averages, $totalrain;
#    exit;
}
&catchup($last);

sub catchup {
    my($last) = @_;
    open PIPE, '-|', (qw(./wvtxt localhost), $last) or die $!;
    select PIPE; $| = 1; select STDOUT; $| = 1;
    while (<PIPE>) {
	chomp;
	my($type, $time, @v) = split ':';
	$type eq 'L' and next;	# ignore LOOPS while getting archives
#	$type eq 'A' and next;	# ignore archives while getting LOOPS
	grep s/-100000.000000/U/, @v;
	map { $f{$_} = shift @v || 0 } @FIELD;

	&rrdupdate($rrdfile, $FIELD,
		   (join ':', $time, map { $f{$_} } @FIELD),
		   $wviewrrd);

	$totalrain += $f{sampleRain} || 0;
	&rrdupdate($rainfile, 'totalRain',
		   (join ':', $time, $totalrain),
		   $rainrrd);
    }
}

# update an RRD file, creating it if needed
sub rrdupdate {
    my($file, $template, $data, $rrd) = @_;

    unless (-s $file) {
	my @path = split '/', $file;
	my $parent = '.';
	for (@path) {
	    next if /.rrd$/;
	    $parent .= "/$_";
	    next if -d $parent;
	    mkdir $parent or carp "can't mkdir $parent: $!\n";
	}
	my $step = $rrd->{step} || 60;
	my $heartbeat = $rrd->{heartbeat} || $step * 3;
	my $start = $rrd->{start} || time - 366 * 24 * 60 * 60;
	my @rrd = ($file,
		   '--start' => $start,
		   '--step'  => $step);
	for my $ds (split ':', $template) {
	    my $type = 'GAUGE';
	    defined $rrd->{ds} and defined $rrd->{ds}{$ds} and
		$type = $rrd->{ds}{$ds};
	    push @rrd, "DS:$ds:$type:$heartbeat:0:U"; # fix this (0:U)
	}
	for my $p (@{$rrd->{rra}}) {
	    my($per, $total, @cf) = @$p;
	    my $steps = $per / $step;
	    my $rows = $total / $per;
	    my $xff = $rrd->{xff} || 0.5;
	    for my $cf (@cf) {
		push @rrd, "RRA:$cf:$xff:$steps:$rows";
	    }
	}
	# print join "\n", @rrd;
	# exit;
	RRDs::create(@rrd);
	my $err = RRDs::error;
	croak "ERROR while creating $file: $err\n" if $err;
    }
    print "$data\n";
    RRDs::update($file, '--template' => $template, $data);
    my $err = RRDs::error;
    carp "ERROR while updating $file: $err\n" if $err;
}

__END__
# from wx200d:
# 91 MB: great zoom for 10 days, 60 days and 5 years + 50 year daily almanac
$DETAIL  = 10;		# All details, 86400 / $STEP points per day  (10)
$MINUTE  = 10;		#   1 minute summary,   1440 points per day  (10)
$FIVEMIN = 60;		#   5 minute summary,    288 points per day  (60)
$QUARTER = 366 *  5;	# 1/4 hour   summary,     96 points per day  (366 * 5)
$HOUR    = 366 *  0;	#     hour   summary,     24 points per day  (0)
$DAY     = 366 * 50;	#     daily  summary,    365 points per year (366 * 50)
$WEEK    = 366 *  0;	#     weekly summary,     52 points per year (0)
$MONTH   = 366 *  0;	#   4-week   summary,     13 points per year (0)
